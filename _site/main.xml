<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Owlery</title>
    <description>Description</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/main.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 23 Jan 2019 21:47:42 -0600</pubDate>
    <lastBuildDate>Wed, 23 Jan 2019 21:47:42 -0600</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <pubDate>Sun, 09 Apr 2017 19:00:00 -0500</pubDate>

        
          <title>Aside: Thor Ragnarok Trailer</title>
        

        <description>
          
            <![CDATA[
            <p><a href="https://youtube.com/watch?v=v7MGUNV8MxU">The first trailer for Thor: Ragnarok is here</a> and it looks incredible.</p>

            ]]>
          

        </description>
        <guid isPermaLink="true">http://localhost:4000/2017/04/thor-ragnarok</guid>
        <link>http://localhost:4000/2017/04/thor-ragnarok</link>
      </item>
    
      <item>
        <pubDate>Mon, 30 Jan 2017 18:00:00 -0600</pubDate>

        
          <title>Aside: Linea</title>
        

        <description>
          
            <![CDATA[
            <p>The Iconfactory <a href="http://linea-app.com/">released a great new drawing app for the iPad called Linea</a>. Definitely worth the $10 price tag.</p>

            ]]>
          

        </description>
        <guid isPermaLink="true">http://localhost:4000/2017/01/linea</guid>
        <link>http://localhost:4000/2017/01/linea</link>
      </item>
    
      <item>
        <pubDate>Fri, 30 Dec 2016 18:00:00 -0600</pubDate>

        
          <title>Aside: David Chang’s Unified Theory of Deliciousness</title>
        

        <description>
          
            <![CDATA[
            <p>I really enjoyed this Wired article by David Chang (of Momofuku Milk Bar fame) about his <a href="https://www.wired.com/2016/07/chef-david-chang-on-deliciousness/?mbid=synd_digg">unified theory of deliciousness</a>.</p>

            ]]>
          

        </description>
        <guid isPermaLink="true">http://localhost:4000/2016/12/unified-theory-of-deliciousness</guid>
        <link>http://localhost:4000/2016/12/unified-theory-of-deliciousness</link>
      </item>
    
      <item>
        <pubDate>Fri, 16 Dec 2016 18:00:00 -0600</pubDate>

        
          <title>Aside: Viticci's One Year of iPad Pro</title>
        

        <description>
          
            <![CDATA[
            <p>Federico Viticci wrote <a href="https://www.macstories.net/stories/one-year-of-ipad-pro/">a great article about his year of using the iPad Pro exclusively for work</a>. This is impressive and it makes me jealous that I just can’t seem to make the iPad stick for me.</p>

            ]]>
          

        </description>
        <guid isPermaLink="true">http://localhost:4000/2016/12/year-of-ipad-pro</guid>
        <link>http://localhost:4000/2016/12/year-of-ipad-pro</link>
      </item>
    
      <item>
        <pubDate>Wed, 07 Dec 2016 18:00:00 -0600</pubDate>

        
          <title>Aside: Photography Mapped</title>
        

        <description>
          
            <![CDATA[
            <p>I <em>love</em> <a href="http://photography-mapped.com/about.html">this interactive website by Simon Roberts which demonstrates the different manual elements of a camera</a>. You can also order this as a beautiful print, which would make a great Christmas gift.</p>

            ]]>
          

        </description>
        <guid isPermaLink="true">http://localhost:4000/2016/12/photography-mapped</guid>
        <link>http://localhost:4000/2016/12/photography-mapped</link>
      </item>
    
      <item>
        <pubDate>Thu, 01 Dec 2016 18:00:00 -0600</pubDate>

        
          <title>Excellent Jams: Winter 2016</title>
        

        <description>
          
            <![CDATA[
            <p>Music is my biggest obsession, and I thought it would be a fun idea to round up some things that I have been jamming to recently. Some of these albums are new, some are not-so-new, but they are all great. I’ve included Spotify links to all of them. Enjoy!</p>

<ol>
  <li><strong><a href="https://open.spotify.com/album/43TJjpNBfw0qY6E87VeIxX">The Rolling Stones: Blue &amp; Lonesome</a></strong>  <br />
Just released today, this album features Mick and the crew covering classing blues songs. If you’re into blues, check this out for sure.</li>
  <li><strong><a href="https://open.spotify.com/album/5AgsHUKFxr5DApRCmulIqJ">The Hamilton Mixtape</a></strong>  <br />
Another one that just dropped, this features songs from the popular musical covered by popular artists. There are even a few demos by Lin-Manuel Miranda that didn’t make it into the show.</li>
  <li><strong><a href="https://open.spotify.com/album/30Ni9qg2MBeeZXybsMOQ7m">OneRepublic: Oh My My</a></strong>  <br />
OneRepublic’s latest album is their best one yet, in my humble opinion.</li>
  <li><strong><a href="https://open.spotify.com/album/2jJReDZqTuAxr4R0ItimZc">Jon Bellion: The Human Condition</a></strong> <br />
Jon Bellion is more talented than anyone has any right to be. His music combines hip-hop, R&amp;B, and indie rock in a beautiful way. If you listen to one thing from this list, it should be this.</li>
  <li><strong><a href="https://open.spotify.com/album/4PgleR09JVnm3zY1fW3XBA">Bruno Mars: 24K Magic</a></strong> <br />
If Michael Jackson was the King of Pop, Bruno Mars is most definitely the heir to the throne.</li>
  <li><strong><a href="https://open.spotify.com/album/3PYk8e7eo2t5CA1Y3AvhaG">Young the Giant: Home of the Strange</a></strong>  <br />
Young the Giant is one the best indie rock bands. Their latest album shakes things up a bit and keeps it fresh.</li>
  <li><strong><a href="https://open.spotify.com/album/43URJ507cdoIRy3GJdfxjs">Saint Motel: saintmotelevision</a></strong>  <br />
Saint Motel is an indie pop staple, and their latest album is quite good.</li>
</ol>

<p>I hope you enjoy these as much as I do! <a href="https://twitter.com/chase_mccoy">Hit me up on Twitter</a> and let me know what you think.</p>

            ]]>
          

        </description>
        <guid isPermaLink="true">http://localhost:4000/2016/12/tunage</guid>
        <link>http://localhost:4000/2016/12/tunage</link>
      </item>
    
      <item>
        <pubDate>Sat, 12 Nov 2016 18:00:00 -0600</pubDate>

        
          <title>Default Constraint Behaviors Using Swift Protocols</title>
        

        <description>
          
            <![CDATA[
            <p>When developing an iOS app, you often need to adjust constraints in order to make sure that the keyboard doesn’t obscure any of the elements on screen. This is a common problem that is an easy but annoying fix.</p>

<p>A few days ago I came across <a href="https://blog.propellerlabs.co/making-life-easier-with-a-keyboardavoidable-protocol-62c6689f603d#.xpxq1lk3w">this Medium article by Roy McKenzie about a Swift protocol called <code class="highlighter-rouge">KeyboardAvoidable</code></a> that makes this process so much easier.</p>

<p>To sum it up quickly, any view controller that needs to adjust constraints in response to the keyboard hiding/showing just needs to conform to this protocol and then provide an array of constraints that need to be adjusted. The protocol extension has default methods that can be called when the controller is presented to add keyboard observers, and vice versa when the controller is dismissed.</p>

<p>With this short bit of code (available ion a Gist at the end of the post), all you would need to do to get this behavior is hook up outlets to the constraints of the views that need to be adjusted (probably the bottom constraint of a scroll view), stick them in an array, and implement the requirements of the protocol. When the keyboard is shown, your constraints will all be adjusted <em>and</em> animated. Sweet.</p>

<p>This ideas is so incredibly cool and useful and awesome and I plan to use it in every single project that requires this kind of behavior. What’s better is that the code is very easy to understand and modify for your specific needs.</p>

<p>After seeing this, it got me thinking about other ways protocols can be used to add default behaviors to views by injecting constraints. Every constraint you create in IB is of type <code class="highlighter-rouge">NSLayoutConstraint</code>, which means we can create very generic and reusable code very easily. <a href="https://www.natashatherobot.com/protocol-oriented-views-in-swift/">Natasha the Robot has a great post about protocol-oriented views in Swift</a> that is similar to this, except she isn’t using constraints. In that post, she demonstrated adding animations like shaking to views using protocols so that this functionality can be reused.</p>

<p>In a project I am working on, I have some views inside of a view controller that need to be toggled between being hidden or shown when the user tap’s a button. In addition, I want the view to animate into and off of the screen when it is toggled.</p>

<p>Originally, I was just creating outlets to the constraints on these views that I wanted to collapse upon and then putting all of the toggling logic into a method in my view controller that would get called when a button was tapped. This led to a lot of repeated code. For every collapsible view in my view controller, I was essentially writing the exact same code with slight variations to change which constraint I was collapsing upon. After seeing Roy’s <code class="highlighter-rouge">KeyboardAvoidable</code> protocol, I realized there was a much better way.</p>

<p>I started by making a protocol to represent collapsible views:</p>

<div class="language-swift highlighter-rouge"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">Collapsible</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">collapseConstraint</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="p">?</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
  <span class="kd">func</span> <span class="nf">collapseView</span><span class="p">()</span>
  <span class="kd">func</span> <span class="nf">showView</span><span class="p">()</span>
  <span class="kd">func</span> <span class="nf">isCollapsed</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
<span class="p">}</span>
</code></pre>
</div>

<p>The <code class="highlighter-rouge">collapseConstraint</code> variable is the constraint that we want our view to collapse upon. I made this optional because there could be a situation where we want to use one of these views without the collapsing functionality, and in that case we just won’t set this variable and it will default to nil. The <code class="highlighter-rouge">collapseView()</code> and <code class="highlighter-rouge">showView()</code> methods are called when we tap our button, and the <code class="highlighter-rouge">isCollapsed()</code> method just returns a bool letting us know what state we’re in.</p>

<p>Next, I created an extension for my <code class="highlighter-rouge">Collapsible</code> protocol that defined my default implementations of those methods. I constrained my extension to only apply to <code class="highlighter-rouge">UIView</code> objects:</p>

<div class="language-swift highlighter-rouge"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Collapsible</span> <span class="k">where</span> <span class="k">Self</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">collapseView</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">collapseConstraint</span><span class="p">?</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="p">)</span>
  <span class="p">}</span>
  
  <span class="kd">func</span> <span class="nf">showView</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">collapseConstraint</span><span class="p">?</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="p">}</span>
  
  <span class="kd">func</span> <span class="nf">isCollapsed</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">!</span><span class="p">(</span><span class="n">collapseConstraint</span><span class="p">?</span><span class="o">.</span><span class="n">constant</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>

<p>In my app, these view’s will be sliding into and off of the screen from the left or the right, so the <code class="highlighter-rouge">collapseView()</code> method set’s the constant of the collapse constraint to the negative value of the width (that way the view is entirely off screen). The <code class="highlighter-rouge">showView()</code> method sets the constant to 0, so that the view is pinned to the left or right edge. These methods will obviously need to be customized depending on which direction you want your view’s to collapse. If you wanted to get really fancy, you could set the direction as well as the constraint so that you can collapse in any direction with this one protocol.</p>

<p>The next step is just to create a view that conforms to the protocol, and declare our <code class="highlighter-rouge">collapseConstraint</code> variable:</p>

<div class="language-swift highlighter-rouge"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">MyView</span><span class="p">:</span> <span class="kt">UIView</span><span class="p">,</span> <span class="kt">Collapsible</span> <span class="p">{</span>  
  <span class="k">var</span> <span class="nv">collapseConstraint</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="p">?</span>
<span class="p">}</span>
</code></pre>
</div>

<p>In my app, I am putting my views into my controller using Interface Builder. So inside of my controller I just create an outlet to the view and to the constraint that I want to collapse upon (trailing for right edge or leading for left edge), and in <code class="highlighter-rouge">viewDidLoad()</code> I set the <code class="highlighter-rouge">collapseConstraint</code> variable:</p>

<div class="language-swift highlighter-rouge"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">MyViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
  <span class="kd">@IBOutlet</span> <span class="k">var</span> <span class="nv">myView</span><span class="p">:</span> <span class="kt">MyView</span><span class="o">!</span>
  <span class="kd">@IBOutlet</span> <span class="k">var</span> <span class="nv">myViewLeadingConstraint</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">!</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    
    <span class="n">myView</span><span class="o">.</span><span class="n">collapseConstraint</span> <span class="o">=</span> <span class="n">myViewLeadingConstraint</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>

<p>The only thing left to do is put in a method that gets called when you tap a button (or take some other action):</p>

<div class="language-swift highlighter-rouge"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">buttonTapped</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">if</span> <span class="n">myView</span><span class="o">.</span><span class="nf">isCollapsed</span><span class="p">()</span> <span class="p">{</span>
	  <span class="n">myView</span><span class="o">.</span><span class="nf">showView</span><span class="p">()</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
	  <span class="n">myView</span><span class="o">.</span><span class="nf">collapseView</span><span class="p">()</span>
	<span class="p">}</span>
	
	<span class="kt">UIView</span><span class="o">.</span><span class="nf">animateWithDuration</span><span class="p">(</span><span class="mf">0.3</span><span class="p">)</span> <span class="p">{</span>
	  <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">layoutIfNeeded</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre>
</div>

<p>I put in the animation block in order to make the constraint change animate over a given time.</p>

<p>Building protocols like these make creating repeated behaviors extremely simple, and IB constraints fit so perfectly into this method. I am using this technique in several places, and I highly recommend it.</p>

            ]]>
          

        </description>
        <guid isPermaLink="true">http://localhost:4000/2016/11/protocol-constraint-behaviors</guid>
        <link>http://localhost:4000/2016/11/protocol-constraint-behaviors</link>
      </item>
    
      <item>
        <pubDate>Sun, 06 Nov 2016 18:00:00 -0600</pubDate>

        
          <title>Aside: Stagehand</title>
        

        <description>
          
            <![CDATA[
            <p>Neven Mrgan (creator of The Incident and Space Age, both excellent) <a href="http://www.stagehandgame.com/">has a new game coming soon called Stagehand</a>. It’s a reverse platformer, where you control the platforms instead of the character. It looks great, and Cabel Sasser did the soundtrack. Neven and Cabel make a fantastic team when it comes to awesome games.</p>

            ]]>
          

        </description>
        <guid isPermaLink="true">http://localhost:4000/2016/11/stagehand</guid>
        <link>http://localhost:4000/2016/11/stagehand</link>
      </item>
    
      <item>
        <pubDate>Sun, 06 Nov 2016 18:00:00 -0600</pubDate>

        
          <title>Aside: Design is a vessel</title>
        

        <description>
          
            <![CDATA[
            <p>I really love this quote about design from <a href="https://thegreatdiscontent.com/interview/frank-chimero">Frank Chimero’s interview on The Great Discontent</a>:</p>

<blockquote>
  <p>Design is a vessel. There’s the whole Buddhist thing about the essence of a bowl being its emptiness—that’s why it’s useful. Its emptiness allows it to hold something. I guess that means that design must talk about something else. If you make design about design, you’re just stacking bowls, and that’s not what bowls are for.</p>
</blockquote>

<p>Another way of putting this is that good design frames the content and conveys the message in the simplest way possible. Just like a bowl.</p>

            ]]>
          

        </description>
        <guid isPermaLink="true">http://localhost:4000/2016/11/design-is-a-vessel</guid>
        <link>http://localhost:4000/2016/11/design-is-a-vessel</link>
      </item>
    
      <item>
        <pubDate>Sat, 05 Nov 2016 19:00:00 -0500</pubDate>

        
          <title>Quote: Violent Work</title>
        

        <description>
          
            <![CDATA[
            <p>
              “Be regular and orderly in your life, so that you may be violent and original in your work.
”
            </p>
            <p>— Gustave Flaubert</p>
            ]]>
          

        </description>
        <guid isPermaLink="true">http://localhost:4000/2016/11/violent-work</guid>
        <link>http://localhost:4000/2016/11/violent-work</link>
      </item>
    
  </channel>
</rss>
